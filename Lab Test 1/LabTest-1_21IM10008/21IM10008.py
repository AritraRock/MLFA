# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kXUmmRL5SkYm5GXzW-4JA72Y-z-1upym

#**Aritra Ray**
#**21IM10008**
"""

import numpy as np
import pandas as pd

df=pd.read_csv("diabetes.csv")
df.head()

"""#Experiment 1"""

df.drop('Pregnancies',axis=1,inplace=True)
df.drop('SkinThickness',axis=1,inplace=True)
dataset_altered=df.drop('DiabetesPedigreeFunction',axis=1)
dataset_altered.dropna()
dataset_altered.head(10)

"""#Experiment 2"""

dataset_altered.corr()

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10, 8))
sns.heatmap(dataset_altered.corr(), annot=True, cmap="coolwarm")
plt.show()

"""#Experiment 3"""

class linear_regression_closed():
  def __init__(self):
    self.weights=None

  def fit(self,X,y):
    self.weights=np.dot(np.linalg.inv(np.dot(X.T,X)),(np.dot(X.T,y))) #Using closed form equation ((Xt.X)^-1).(Xt.y)

  def predict(self,X):
    y_pred_linear=np.dot(X,self.weights)
    # y_pred=sigmoid(y_pred_linear)
    class_pred = [0 if y<=0.5 else 1 for y in y_pred_linear]
    return class_pred

import sklearn
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
X=dataset_altered.drop('Outcome',axis=1)
y=dataset_altered['Outcome']
X_new = np.hstack((np.ones((X.shape[0], 1)), X))
X_new, y = shuffle(X_new, y, random_state=34)
X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.2, random_state=35)
clf = linear_regression_closed()
clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)

from sklearn.metrics import confusion_matrix
def accuracy(y_pred, y_test):
    return np.sum(y_pred==y_test)/len(y_test)

# Calculated accuracy on training and testing datasets
train_accuracy = accuracy(clf.predict(X_train),y_train) * 100
test_accuracy = accuracy(y_pred,y_test) * 100

# Created confusion matrix for test data
cm = confusion_matrix(y_test, y_pred)

# Printed the results
print("Percentage Accuracy on Training Dataset:", train_accuracy)
print("Percentage Accuracy on Testing Dataset:", test_accuracy)

# Plotted the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix for Test Data")
plt.show()

class linear_regression__gradient():

    def __init__(self, lr=0.001, n_iters=50):
        self.lr = lr
        self.n_iters = n_iters
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        for _ in range(self.n_iters):
            linear_pred = np.dot(X, self.weights) + self.bias
            # pred = sigmoid(linear_pred)

            dw = (1/n_samples) * np.dot(X.T, (linear_pred - y))
            db = (1/n_samples) * np.sum(linear_pred-y)

            self.weights = self.weights - self.lr*dw
            self.bias = self.bias - self.lr*db


    def predict(self, X):
        y_pred_linear = np.dot(X, self.weights) + self.bias
        # y_pred_linear = np.clip(y_pred_linear, -50, 50)
        # print(y_pred_linear)
        # y_pred = sigmoid(y_pred_linear)
        class_pred = [0 if y<=0.5 else 1 for y in y_pred_linear]
        return class_pred

X, y = shuffle(X, y, random_state=34)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=35)

eta=[1e-5, 1e-3, 0.05, 0.1]
for i in eta:
  clf2 = linear_regression__gradient(lr=i)
  clf2.fit(X_train,y_train)
  y_pred = clf2.predict(X_test)
  acc = accuracy(y_pred, y_test)
  print("Accuracy for ",i,"is ",acc)

eta_optimal = 0.1  # Initialized with the highest learning rate
max_accuracy = 0

for i in eta:
    clf2 = linear_regression__gradient(lr=i)
    clf2.fit(X_train, y_train)
    y_pred = clf2.predict(X_test)
    acc = accuracy(y_pred, y_test)
    if acc > max_accuracy:
        eta_optimal = i
        max_accuracy = acc

print("Optimal Learning Rate:", eta_optimal)

# Tabulated the Percentage Accuracy on training and testing dataset for the optimal learning rate

clf2 = linear_regression__gradient(lr=eta_optimal)
clf2.fit(X_train, y_train)
y_pred = clf2.predict(X_test)
train_accuracy = accuracy(clf2.predict(X_train), y_train) * 100
test_accuracy = accuracy(y_pred, y_test) * 100

print("Percentage Accuracy on Training Dataset:", train_accuracy)
print("Percentage Accuracy on Testing Dataset:", test_accuracy)

# Plotted the confusion matrix

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix for Test Data")
plt.show()